{
  "PasswordInput": {
    "colorScheme": {
      "type": "\"blackAlpha\" | \"whiteAlpha\" | \"amber\" | \"blue\" | \"info\" | \"link\" | \"primary\" | \"cyan\" | \"emerald\" | \"flashy\" | \"fuchsia\" | \"gray\" | \"green\" | \"success\" | \"indigo\" | \"lime\" | \"neutral\" | \"orange\" | \"warning\" | \"pink\" | \"purple\" | \"red\" | \"danger\" | \"rose\" | \"sky\" | \"teal\" | \"violet\" | \"secondary\" | \"yellow\"",
      "description": "The visual color appearance of the component.",
      "required": false
    },
    "containerProps": {
      "type": "HTMLUIProps",
      "description": "The props for the container element.",
      "required": false
    },
    "defaultIsVisible": {
      "type": "boolean",
      "defaultValue": false,
      "deprecated": "Use `defaultVisible` instead.",
      "description": "Determines whether the password input is visible by default.",
      "required": false
    },
    "defaultVisible": {
      "type": "boolean",
      "defaultValue": false,
      "description": "Determines whether the password input is visible by default.",
      "required": false
    },
    "errorBorderColor": {
      "type": "\"border\" | BorderColor | \"amber.50\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.500\" | \"amber.600\" | \"amber.700\" | \"amber.800\" | \"amber.900\" | ... 320 more ... | [...]",
      "description": "The border color when the input is invalid.",
      "required": false
    },
    "focusBorderColor": {
      "type": "\"border\" | BorderColor | \"amber.50\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.500\" | \"amber.600\" | \"amber.700\" | \"amber.800\" | \"amber.900\" | ... 320 more ... | [...]",
      "description": "The border color when the input is focused.",
      "required": false
    },
    "iconProps": {
      "type": "HTMLUIProps",
      "description": "The props for the icon element.",
      "required": false
    },
    "inputProps": {
      "type": "HTMLUIProps<\"input\">",
      "description": "The props for the input element.",
      "required": false
    },
    "invalid": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be invalid.",
      "required": false
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "deprecated": "Use `disabled` instead.",
      "description": "If `true`, the form control will be disabled.",
      "required": false
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "deprecated": "Use `invalid` instead.",
      "description": "If `true`, the form control will be invalid.",
      "required": false
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "deprecated": "Use `readOnly` instead.",
      "description": "If `true`, the form control will be readonly.",
      "required": false
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "deprecated": "Use `required` instead.",
      "description": "If `true`, the form control will be required.",
      "required": false
    },
    "isVisible": {
      "type": "boolean",
      "defaultValue": false,
      "deprecated": "Use `visible` instead.",
      "description": "Determines the visibility of the password input.",
      "required": false
    },
    "onVisibleChange": {
      "type": "(visible: boolean) => void",
      "description": "Callback function that is triggered when the visibility of the password input changes.",
      "required": false
    },
    "size": {
      "type": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\"",
      "defaultValue": "\"md\"",
      "description": "The size of the PasswordInput.",
      "required": false
    },
    "variant": {
      "type": "\"filled\" | \"flushed\" | \"outline\" | \"unstyled\"",
      "defaultValue": "\"outline\"",
      "description": "The variant of the PasswordInput.",
      "required": false
    },
    "visibilityIcon": {
      "type": "{\n  off: ReactElement<any, string | JSXElementConstructor<any>>\n  on: ReactElement<any, string | JSXElementConstructor<any>>\n}",
      "description": "The icons to be used for the visibility toggle.",
      "required": false
    },
    "visible": {
      "type": "boolean",
      "defaultValue": false,
      "description": "Determines the visibility of the password input.",
      "required": false
    }
  },
  "PasswordInputStrengthMeter": {
    "value": {
      "type": "number",
      "description": "The value of the password strength meter.",
      "required": true
    },
    "getStrengthMeterIndicatorProps": {
      "type": "(percent: number) => StrengthMeterIndicatorProps",
      "description": "The props of the password strength meter indicator.",
      "required": false
    },
    "max": {
      "type": "number",
      "defaultValue": "4",
      "description": "The maximum value of the password strength meter.",
      "required": false
    },
    "withLabel": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the password strength meter will display the label.",
      "required": false
    }
  }
}
